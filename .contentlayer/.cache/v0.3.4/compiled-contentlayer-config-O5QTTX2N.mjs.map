{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\n \nimport rehypeAutolinkHeadings, {\n  type Options as AutolinkOptions,\n} from 'rehype-autolink-headings';\nimport rehypePrettyCode, {\n  type Options as PrettyCodeOptions,\n} from 'rehype-pretty-code';\nimport rehypeSlug from 'rehype-slug';\nimport { s } from 'hastscript';\n \n// defining document type where we will defing our mdx document frontmatter structure\n// (all these fields will be passed to static json with types that can be imported and used by next app)\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    excerpt: {\n      type: 'string',\n      required: true,\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      required: true,\n    },\n    cover: {\n      type: 'image',\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/articles/${post._raw.flattenedPath}`,\n    },\n    readTime: {\n      type: 'string',\n      resolve: (post) => {\n        const wordsPerMinute = 200;\n        const noOfWords = post.body.raw.split(/\\s/g).length;\n        const minutes = noOfWords / wordsPerMinute;\n        const readTime = Math.ceil(minutes);\n        return readTime;\n      },\n    },\n  },\n}));\n \nexport default makeSource({\n  // folder in which we will store our content mdx files\n  contentDirPath: 'posts',\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [\n      /**\n       * Adds ids to headings\n       */\n      rehypeSlug,\n      [\n        /**\n         * Adds auto-linking button after h1, h2, h3 headings\n         */\n        rehypeAutolinkHeadings,\n        {\n          behavior: 'append',\n          test: ['h2', 'h3'],\n          properties: { class: 'heading-link' },\n          content: s(\n            'svg',\n            {\n              xmlns: 'http://www.w3.org/2000/svg',\n              viewBox: '0 0 24 24',\n              width: '24',\n              height: '24',\n              fill: 'none',\n              stroke: 'currentColor',\n              'stroke-width': '2',\n              'stroke-linecap': 'round',\n              'stroke-linejoin': 'round',\n              'aria-label': 'Anchor link',\n            },\n            [\n              s('line', { x1: '4', y1: '9', x2: '20', y2: '9' }),\n              s('line', { x1: '4', y1: '15', x2: '20', y2: '15' }),\n              s('line', { x1: '10', y1: '3', x2: '8', y2: '21' }),\n              s('line', { x1: '16', y1: '3', x2: '14', y2: '21' }),\n            ],\n          ),\n        } satisfies Partial<AutolinkOptions>,\n      ],\n      [\n        /**\n         * Enhances code blocks with syntax highlighting, line numbers,\n         * titles, and allows highlighting specific lines and words\n         */\n        rehypePrettyCode,\n        {\n          theme: {\n            // light: 'github-light',\n            dark: 'github-dark',\n          },\n        } satisfies Partial<PrettyCodeOptions>,\n      ],\n    ],\n  },\n});\n\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAE/C,OAAO,4BAEA;AACP,OAAO,sBAEA;AACP,OAAO,gBAAgB;AACvB,SAAS,SAAS;AAIX,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,aAAa,KAAK,KAAK,aAAa;AAAA,IACzD;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,CAAC,SAAS;AACjB,cAAM,iBAAiB;AACvB,cAAM,YAAY,KAAK,KAAK,IAAI,MAAM,KAAK,EAAE;AAC7C,cAAM,UAAU,YAAY;AAC5B,cAAM,WAAW,KAAK,KAAK,OAAO;AAClC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA;AAAA,EAExB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe;AAAA;AAAA;AAAA;AAAA,MAIb;AAAA,MACA;AAAA;AAAA;AAAA;AAAA,QAIE;AAAA,QACA;AAAA,UACE,UAAU;AAAA,UACV,MAAM,CAAC,MAAM,IAAI;AAAA,UACjB,YAAY,EAAE,OAAO,eAAe;AAAA,UACpC,SAAS;AAAA,YACP;AAAA,YACA;AAAA,cACE,OAAO;AAAA,cACP,SAAS;AAAA,cACT,OAAO;AAAA,cACP,QAAQ;AAAA,cACR,MAAM;AAAA,cACN,QAAQ;AAAA,cACR,gBAAgB;AAAA,cAChB,kBAAkB;AAAA,cAClB,mBAAmB;AAAA,cACnB,cAAc;AAAA,YAChB;AAAA,YACA;AAAA,cACE,EAAE,QAAQ,EAAE,IAAI,KAAK,IAAI,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC;AAAA,cACjD,EAAE,QAAQ,EAAE,IAAI,KAAK,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,CAAC;AAAA,cACnD,EAAE,QAAQ,EAAE,IAAI,MAAM,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC;AAAA,cAClD,EAAE,QAAQ,EAAE,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC;AAAA,YACrD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKE;AAAA,QACA;AAAA,UACE,OAAO;AAAA;AAAA,YAEL,MAAM;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
